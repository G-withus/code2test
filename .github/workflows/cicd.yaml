name: CI/CD to EC2

on:
  push:
    branches:
      - main
    paths:
      - 'Frontend/**'
      - 'Portregistration/**'
      - 'Backend/**'
      - 'docker-compose.yaml'
      - 'Frontend/Dockerfile'
      - 'Portregistration/Dockerfile'
      - 'Backend/Dockerfile'
      - 'Backend/config/application-docker.properties'
      - '.github/workflows/**'
  pull_request:
    branches:
      - main
    paths:
      - 'Frontend/**'
      - 'Portregistration/**'
      - 'Backend/**'
      - 'docker-compose.yaml'
      - 'Frontend/Dockerfile'
      - 'Portregistration/Dockerfile'
      - 'Backend/Dockerfile'
      - 'Backend/config/application-docker.properties'
      - '.github/workflows/**'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Frontend image
        run: docker build -t communication-test-frontend:latest ./Frontend

      - name: Build Portregistration image
        run: docker build -t communication-test-portregistration:latest ./Portregistration

      - name: Build Backend image
        run: docker build -t communication-test-backend:latest ./Backend

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' # Only deploy on push, not pull requests

    steps:
      - name: Checkout code
        uses: actions/checkout@v4


      - name: Install SSH key
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > ec2_key
          chmod 600 ec2_key

      - name: Copy project files to EC2
        run: |
          scp -i ec2_key -o StrictHostKeyChecking=no -r \
            Frontend Portregistration Backend docker-compose.yaml \
            ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/home/${{ secrets.EC2_USER }}/communication-test/

      - name: Deploy to EC2
        run: |
          ssh -i ec2_key -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            cd /home/${{ secrets.EC2_USER }}/communication-test

            # Stop and remove existing containers
            docker compose down

            # Build and start containers
            docker compose up --build -d

            # Clean up unused Docker resources
            docker system prune -a -f
          EOF

      - name: Clean up SSH key
        if: always()
        run: rm -f ec2_key
