
services:
  frontend:
    build:
      context: ./Frontend
      dockerfile: Dockerfile
    ports:
      - "80:80"  # Expose frontend on port 80
    depends_on:
      backend:
        condition: service_healthy  # Wait for backend to be healthy
    networks:
      - testmdt-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]  # Check if frontend is responsive
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"  # Limit log file size
        max-file: "3"    # Rotate logs

  portregistration:
    build:
      context: ./Portregistration
      dockerfile: Dockerfile
    ports:
      - "81:81"  # Expose portregistration on port 81
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - testmdt-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:81"]  # Adjust based on service
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  backend:
    build:
      context: ./Backend
      dockerfile: Dockerfile
    ports:
      - "8080:8080"  # Expose backend HTTP/WebSocket endpoint
      - "10000-10010:10000-10010/udp"  # Reduced UDP range for testing
    depends_on:
      mysqldb:
        condition: service_healthy
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysqldb:3306/manage_port?useSSL=false&serverTimezone=UTC
      - SPRING_DATASOURCE_USERNAME=appuser
      - SPRING_DATASOURCE_PASSWORD=apppassword
    networks:
      - testmdt-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]  # Adjust if no /actuator
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          cpus: "1.0"  # Limit CPU usage
          memory: 1G   # Limit memory usage

  mysqldb:
    image: mysql:8.0  # Pinned version for stability
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-root}  # Use env var with default
      MYSQL_DATABASE: manage_port
      MYSQL_USER: appuser
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-apppassword}
    volumes:
      - mysqldb-data:/var/lib/mysql
    # ports:  # Removed external exposure for security
    #   - "3306:3306"
    networks:
      - testmdt-network
    restart: unless-stopped
    command: --default-authentication-plugin=mysql_native_password
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "appuser", "-p${MYSQL_PASSWORD:-apppassword}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 512M

volumes:
  mysqldb-data:
    name: mysqldb-data  # Explicitly named volume for clarity

networks:
  testmdt-network:
    driver: bridge
    name: testmdt-network
```
